{
  "let": {
    "prefix": "let",
    "body": "let ${1:identifier} = $0"
  },
  "where": {
    "prefix": "where",
    "body": "where ${1:identifier} = $0"
  },
  "module": {
    "prefix": "module",
    "body": [
      "module ${1:Mod}",
      "\t( ${2:a}",
      "\t, ${3:b}",
      ") where",
      "$0"
    ]
  },
  "record": {
    "prefix": [ "record", "data-record" ],
    "body": [
      "data ${1:Type} = ${1:Type}",
      "\t{ ${2:field} :: ${3:Type}",
      "\t, ${4:field} :: $0",
      "\t} deriving (${7:Show, Eq})"
    ]
  },
  "data": {
    "prefix": "data-inline",
    "body": "data ${1:Type} = ${2:data} deriving (${3:Show, Eq})$0"
  },
  "newtype": {
    "prefix": "newtype",
    "body": "newtype ${1:Type} = ${1:Type} $0"
  },
  "function": {
    "prefix": [ "function", "variable" ],
    "body": [
      "${1:f} :: ${2:a}",
      "${1:f} ${3:x} = $0"
    ]
  },
  "function-guards": {
    "prefix": [ "function-guards", "guarded-function" ],
    "body": [
      "${1:f} :: ${2:a}",
      "${1:f} ${3:x}",
      "\t| ${4:condition} = ${5:undefined}",
      "\t| ${6:condition} = $0"
    ]
  },
  "lambda": {
    "prefix": [ "\\", "lambda" ],
    "body": "\\\\${1:x} -> $0"
  },
  "language-feature": {
    "prefix": [ "language-feature", "pragma-language" ],
    "body": "{-# LANGUAGE ${1:Extension} #-}$0"
  },
  "get": {
    "prefix": "get",
    "body": "${1:identifier} <- $0"
  }
}
