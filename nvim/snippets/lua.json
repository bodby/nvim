{
  "class": {
    "prefix": "class",
    "body": [
      "local M = { }",
      "",
      "function M.${1:new}($2)",
      "\t$0",
      "end",
      "",
      "return M"
    ]
  },
  "schedule": {
    "prefix": [ "schedule", "vim-schedule" ],
    "body": [
      "vim.schedule(function()",
      "\t$0",
      "end)"
    ]
  },
  "autocmd": {
    "prefix": [ "autocmd", "nvim-create-autocmd" ],
    "body": [
      "vim.api.nvim_create_autocmd({",
      "\t\"${1:VimEnter}\"",
      "}, {",
      "\tgroup    = \"${2:augroup}\",",
      "\tcallback = function(${3:event})",
      "\t\t$0",
      "\tend",
      "})"
    ]
  },
  "metatable": {
    "prefix": [ "metatable", "setmetatable" ],
    "body": [
      "setmetatable({",
      "\t$1",
      "}, {",
      "\t__index = function(${2:self}, ${3:k})",
      "\t\t$0",
      "\tend",
      "})"
    ]
  },

  "local": {
    "prefix": "local",
    "body": "local ${1:x} = $0"
  },
  "function": {
    "prefix": "function",
    "body": [
      "function ${1:f}($2)",
      "\t$0",
      "end"
    ]
  },
  "lambda": {
    "prefix": [ "lambda", "anonymous-function" ],
    "body": [
      "function($1)",
      "\t$0",
      "end"
    ]
  },
  "pcall": {
    "prefix": "pcall",
    "body": "local ${1:status}, ${2:value} = pcall(${3:command})$0"
  },
  "require": {
    "prefix": "require",
    "body": "require \"${1:path.to.module}\"$0"
  },
  "local-require": {
    "prefix": "local-require",
    "body": "local ${1:identifier} = require \"${2:path.to.module}\"$0"
  },
  "return": {
    "prefix": "return",
    "body": "return $0"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ]
  },
  "else": {
    "prefix": "else",
    "body": [
      "else",
      "\t$0",
      "end"
    ]
  },
  "elseif": {
    "prefix": [ "elseif", "elif" ],
    "body": [
      "elseif ${1:true} then",
      "\t$0",
      "end"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:i} = ${2:1}, ${3:10} do",
      "\t$0",
      "end"
    ]
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for ${1:i}, ${2:v} in ipairs(${3:tbl}) do",
      "\t$0",
      "end"
    ]
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ]
  }
}
